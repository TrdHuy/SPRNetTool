name: UnittestService

on:      
  push:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      force:
        description: Force to run unit test
        default: true

jobs:

  build:
    runs-on: windows-latest
    env:
     IS_FORCE_RUN_UNITTEST: ${{ github.event.inputs.force || 'false' }}
     ISLOCAL: false
     GITHUB_TOKEN: ${{ secrets.WORK_FLOW_ACCESS_TOKEN }}
     VERSION_UP_ISSUE_ID: 52
     BUILD_HEAVY_PUBLISH: false
     PROJEFCT_PATH: SPRNetTool\ArtWiz.csproj
     ASSEMBLY_FILTER: "+ArtWiz;-wengine"
     COVERAGE_OUT_DIR: "CoverageOutDir"
     IS_UPLOAD_REPORT_TO_GH_PAGE: ${{ github.event.inputs.force || 'false' }}
     OWNER_TO_UPLOAD_ARTIFACT: "TrdHuy"
     BRANCH_TO_UPLOAD_ARTIFACT: "master"
     ROOT_FOLDER_TO_UPLOAD_ARTIFACT: "CoverageReport"
     PROJECT_ID_TO_UPLOAD_ARTIFACT: "ArtWiz"
     GIT_REPO_TO_UPLOAD_ARTIFACT: "TrdHuy.github.io"
     COVERAGE_RETENTION_HOURS: 24
     # GIT_CONTEXT: ${{ toJson(github) }}
     
    steps:
    ################### CORE REGION #######################
    - name: Checkout repo
      uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Check Commit Message by github script
      if: env.IS_FORCE_RUN_UNITTEST == 'false'
      uses: actions/github-script@v5
      id: get-last-issue-id
      with:
        result-encoding: string
        script: |
          const versionUpIssueId = process.env.VERSION_UP_ISSUE_ID;
          const refName = ${{ toJSON(github.ref_name) }};
          console.log(`refName: ${refName}`);
          const commits = ${{ toJSON(github.event.commits) }};
          const commitMessages = commits.map(function (commit) {
              return commit.message;
          });
          const normalCommitRegex = /^\[#(\d+)\] .+/;
          const mergeCommitByGHRegex = /^Merge branch '(\S+)' into (\S+)$/;

          const issueIds = commitMessages.map(function (message) {
              const match = message.match(normalCommitRegex);
              if (match && match[1]) {
                return match[1]; // Lấy số id từ kết quả match
              } else {
                const mergeMatch = message.match(mergeCommitByGHRegex);
                if (mergeMatch && mergeMatch[2] == refName) {
                  console.log("This is auto merge commit by GitHub")
                  return "";
                }else{
                   throw new Error(`Commit message "${message}" is invaild `);
                }
              }
          });

          for (const issueId of issueIds) {
            try {
              if (issueId == ""){
                 continue;
              }
              const rawData = await github.rest.issues.get({
                issue_number: issueId,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const data = rawData.data;
              const issueUrl = data.html_url;
              if (issueUrl.includes("/issues/")) {
                  console.log("Đây là URL của issue.");
              } else {
                 throw new Error(`github ID: "${issueId}" not invaild `);
              }
              console.log(`Tiêu đề: ${data.title}`);
              console.log(`versionUpIssueId: ${versionUpIssueId}`);
            } catch (error) {
              console.log(`Issue #${issueId} không tồn tại.`);
              console.log(error);
            }
          }
          return issueIds[issueIds.length - 1];
          
    - name: Export issue to env
      shell: bash
      run: |
        echo "ISSUE_NUMBER=${{steps.get-last-issue-id.outputs.result}}" >> $GITHUB_ENV
      
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1 

    - name: Restore nuget
      run: |
       dotnet nuget remove source "trdhuy-nuget-package-source"
       dotnet nuget add source "https://nuget.pkg.github.com/TrdHuy/index.json" --name "trdhuy-nuget-package-source" --username "trdtranduchuy@gmail.com" --password "${{ env.GITHUB_TOKEN }}"
       dotnet restore
    ################## END CORE REGION #######################

    - name: Install report coverage
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool -v n
        dotnet tool install -g dotnet-coverage -v n
        reportgenerator -h

    - name: Run all test
      run: |
        $Headers = @{
            Authorization = "token ${{ env.GITHUB_TOKEN }}"
        }
        $Uri = "https://raw.githubusercontent.com/TrdHuy/_TrdBuildPlugin/master/DotNet/DotNetUnitTest_CoverageReport_UploadReportToGhPage.ps1"
        Invoke-RestMethod -Uri $Uri -Headers $Headers -OutFile DotNetUnitTest_CoverageReport_UploadReportToGhPage.ps1
        & .\DotNetUnitTest_CoverageReport_UploadReportToGhPage.ps1 -prvtoken "${{ env.GITHUB_TOKEN }}" `
            -assemblyfilters "${{ env.ASSEMBLY_FILTER }}" `
            -coverageOutDir "${{ env.COVERAGE_OUT_DIR }}" `
            -config "Release" `
            -platform "x64" `
            -projectPath "SPRNetToolTest\ArtWizTest.csproj" `
            -isUploadArtifactToGitHubPage ([bool]"${{ env.IS_UPLOAD_REPORT_TO_GH_PAGE }}") `
            -ownerRepoToUploadArtifact "${{ env.OWNER_TO_UPLOAD_ARTIFACT }}" `
            -branchRepoToUploadArtifact "${{ env.BRANCH_TO_UPLOAD_ARTIFACT }}" `
            -rootFolderToUploadArtifact "${{ env.ROOT_FOLDER_TO_UPLOAD_ARTIFACT }}" `
            -projectIdToUploadArtifact "${{ env.PROJECT_ID_TO_UPLOAD_ARTIFACT }}" `
            -reportSHAToUploadArtifact "${{ github.sha }}" `
            -gitHubPageRepoToUploadArtifact "${{ env.GIT_REPO_TO_UPLOAD_ARTIFACT }}" `
            -coverageRetentionHours ([System.Int16]"${{ env.COVERAGE_RETENTION_HOURS }}") `
            -additionalProperties @{ "DezoneAdminToken" = "${{ env.GITHUB_TOKEN }}"; "ShouldResolveDezonePkgReferences" = "none"; "DezoneResourceKey" = "${{ env.DEZ_CLIENT_RES_KEY }}"; "ShouldSkipDezVersionCheck" = $true }
        
        & .\DotNetUnitTest_CoverageReport_UploadReportToGhPage.ps1 -prvtoken "${{ env.GITHUB_TOKEN }}" `
            -assemblyfilters "${{ env.ASSEMBLY_FILTER }}" `
            -coverageOutDir "${{ env.COVERAGE_OUT_DIR }}" `
            -config "Release" `
            -platform "x86" `
            -projectPath "SPRNetToolTest\ArtWizTest.csproj" `
            -isUploadArtifactToGitHubPage ([bool]"${{ env.IS_UPLOAD_REPORT_TO_GH_PAGE }}") `
            -ownerRepoToUploadArtifact "${{ env.OWNER_TO_UPLOAD_ARTIFACT }}" `
            -branchRepoToUploadArtifact "${{ env.BRANCH_TO_UPLOAD_ARTIFACT }}" `
            -rootFolderToUploadArtifact "${{ env.ROOT_FOLDER_TO_UPLOAD_ARTIFACT }}" `
            -projectIdToUploadArtifact "${{ env.PROJECT_ID_TO_UPLOAD_ARTIFACT }}" `
            -reportSHAToUploadArtifact "${{ github.sha }}" `
            -gitHubPageRepoToUploadArtifact "${{ env.GIT_REPO_TO_UPLOAD_ARTIFACT }}" `
            -coverageRetentionHours ([System.Int16]"${{ env.COVERAGE_RETENTION_HOURS }}") `
            -additionalProperties @{ "DezoneAdminToken" = "${{ env.GITHUB_TOKEN }}"; "ShouldResolveDezonePkgReferences" = "none"; "DezoneResourceKey" = "${{ env.DEZ_CLIENT_RES_KEY }}"; "ShouldSkipDezVersionCheck" = $true }

    # The coverage report only supported for version up commit, unittest_* and dev* branch 
    ################### UNITTES REGION #######################
    #- name: Run tests with coverage
    #  if: env.IS_FORCE_RUN_UNITTEST == 'true' || env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
    #  run: |
    #    dotnet test --collect:"XPlat Code Coverage" --configuration ${{ matrix.configuration }} -p:Platform=${{ matrix.platformTarget }} /p:IsFromDotnet=true /p:GitToken=${{ env.GITHUB_TOKEN }} --results-directory ./TestResults/${{ matrix.configuration }}/${{ matrix.platformTarget }} /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/${{ matrix.configuration }}/${{ matrix.platformTarget }}/Coverage/
    #- name: ReportGenerator
    #  uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
    #  if: env.IS_FORCE_RUN_UNITTEST == 'true' || env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
    #  with:
    #    reports: 'coverage.xml' 
    #    targetdir: 'CoverageReports'
    #    reporttypes: 'HtmlInline;Cobertura'
    #    verbosity: 'Verbose'
    #- name: Upload artifact
    #  uses: actions/upload-artifact@v4
    #  if: env.IS_FORCE_RUN_UNITTEST == true || env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
    #  with:
    #    name: CoverageReports-Release # Artifact name        
    #    path: CoverageReports # Directory containing files to upload
    #    retention-days: 1
    ################### END UNITTEST REGION #######################
