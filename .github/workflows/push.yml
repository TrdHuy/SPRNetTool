name: UnittestService

on:      
  push:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      force:
        description: Force to run unit test
        default: true

jobs:

  build:
    strategy:
     matrix:
      configuration: [Debug,Release]
      platformTarget: [x64,x86]

    runs-on: windows-latest
    env:
     IS_FORCE_RUN_UNITTEST: ${{ github.event.inputs.force || 'false' }}
     ISLOCAL: false
     GITHUB_TOKEN: ${{ secrets.WORK_FLOW_ACCESS_TOKEN }}
     VERSION_UP_ISSUE_ID: 52
     BUILD_HEAVY_PUBLISH: false
     PROJEFCT_PATH: SPRNetTool\ArtWiz.csproj
     # GIT_CONTEXT: ${{ toJson(github) }}
     
    steps:
    ################### CORE REGION #######################
    - name: Checkout repo
      uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Check Commit Message by github script
      if: env.IS_FORCE_RUN_UNITTEST == false
      uses: actions/github-script@v5
      id: get-last-issue-id
      with:
        result-encoding: string
        script: |
          const versionUpIssueId = process.env.VERSION_UP_ISSUE_ID;
          const refName = ${{ toJSON(github.ref_name) }};
          console.log(`refName: ${refName}`);
          const commits = ${{ toJSON(github.event.commits) }};
          const commitMessages = commits.map(function (commit) {
              return commit.message;
          });
          const normalCommitRegex = /^\[#(\d+)\] .+/;
          const mergeCommitByGHRegex = /^Merge branch '(\S+)' into (\S+)$/;

          const issueIds = commitMessages.map(function (message) {
              const match = message.match(normalCommitRegex);
              if (match && match[1]) {
                return match[1]; // Lấy số id từ kết quả match
              } else {
                const mergeMatch = message.match(mergeCommitByGHRegex);
                if (mergeMatch && mergeMatch[2] == refName) {
                  console.log("This is auto merge commit by GitHub")
                  return "";
                }else{
                   throw new Error(`Commit message "${message}" is invaild `);
                }
              }
          });

          for (const issueId of issueIds) {
            try {
              if (issueId == ""){
                 continue;
              }
              const rawData = await github.rest.issues.get({
                issue_number: issueId,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const data = rawData.data;
              const issueUrl = data.html_url;
              if (issueUrl.includes("/issues/")) {
                  console.log("Đây là URL của issue.");
              } else {
                 throw new Error(`github ID: "${issueId}" not invaild `);
              }
              console.log(`Tiêu đề: ${data.title}`);
              console.log(`versionUpIssueId: ${versionUpIssueId}`);
            } catch (error) {
              console.log(`Issue #${issueId} không tồn tại.`);
              console.log(error);
            }
          }
          return issueIds[issueIds.length - 1];
          
    - name: Export issue to env
      shell: bash
      run: |
        echo "ISSUE_NUMBER=${{steps.get-last-issue-id.outputs.result}}" >> $GITHUB_ENV
      
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1 

    - name: Restore nuget
      run: |
        dotnet nuget remove source "trdhuy-nuget-package-source"
        dotnet nuget add source "https://nuget.pkg.github.com/TrdHuy/index.json" --name "trdhuy-nuget-package-source" --username "trdtranduchuy@gmail.com" --password "${{ env.GITHUB_TOKEN }}"
        dotnet restore
    ################### END CORE REGION #######################


    # The coverage report only supported for version up commit, unittest_* and dev* branch 
    ################### UNITTES REGION #######################
    - name: Run tests with coverage
      if: env.IS_FORCE_RUN_UNITTEST == true || env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
      run: |
        dotnet test --configuration ${{ matrix.configuration }} -p:Platform=${{ matrix.platformTarget }} /p:GitToken=${{ env.GITHUB_TOKEN }} /p:IsFromDotnet=true --collect:"XPlat Code Coverage"
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.7
      if: env.IS_FORCE_RUN_UNITTEST == true || env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
      with:
        reports: '*Test/TestResults/*/coverage.cobertura.xml'
        targetdir: 'CoverageReports'
        reporttypes: 'HtmlInline;Cobertura'
        verbosity: 'Verbose'
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      if: env.IS_FORCE_RUN_UNITTEST == true || env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
      with:
        name: CoverageReports-Release # Artifact name        
        path: CoverageReports # Directory containing files to upload
        retention-days: 1
    ################### END UNITTEST REGION #######################
